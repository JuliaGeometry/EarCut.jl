using BinaryProvider

# This is where all binaries will get installed
const prefix = Prefix(joinpath(@__DIR__, "usr"))

# Instantiate products here.  Examples:
earcut = LibraryProduct(prefix, "earcut")
# foo_executable = ExecutableProduct(prefix, "fooifier")
# libfoo_pc = FileProduct(joinpath(libdir(prefix), "pkgconfig", "libfoo.pc"))

# Assign products to `products`:
products = [earcut]

# Download binaries from hosted location
bin_prefix = "https://github.com/SimonDanisch/EarCutDeps/releases/download/v0.1.5"
# Listing of files generated by BinaryBuilder:
# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/Earcut.aarch64-linux-gnu.tar.gz", "09caecb4561394546e456b6d3902ba681d3a31f2f1caca9317c74978de403c03"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/Earcut.arm-linux-gnueabihf.tar.gz", "eba4d1deef3f7f5e0325ec22162dab7249b2331997264428493520d1efcf17c4"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/Earcut.i686-linux-gnu.tar.gz", "bf6e5a28e32daaa7159b2c64ef0a1ae1e539891185bd440fd701245ed448facd"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/Earcut.i686-w64-mingw32.tar.gz", "c38b67d7fae5b2db8905e538801f390992a0368125e20deb513db39e36b203da"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/Earcut.powerpc64le-linux-gnu.tar.gz", "e3c0b9d671c9ef805381d3d54cea8f7728252f4f9612728d8d145659b861d2c9"),
    BinaryProvider.MacOS() => ("$bin_prefix/Earcut.x86_64-apple-darwin14.tar.gz", "302ec5c22ecd053a1dfdc44f70aa0500d94e6a5c7d71d876d0265aad1589cecd"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/Earcut.x86_64-linux-gnu.tar.gz", "b371bc36f28bf3b39d5d48913dd8a3eecb5e03aa43da87ccf514eb9973fe2446"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/Earcut.x86_64-w64-mingw32.tar.gz", "9a51509aa3cf9705b9f6833aa6f74733f483fc55b0fef027e717bada9805bf77"),
)

if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=true) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end
    @write_deps_file earcut
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end
