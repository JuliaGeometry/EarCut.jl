using BinaryProvider

# This is where all binaries will get installed
const prefix = Prefix(joinpath(@__DIR__, "usr"))

# Instantiate products here.  Examples:
earcut = LibraryProduct(prefix, "earcut")
# foo_executable = ExecutableProduct(prefix, "fooifier")
# libfoo_pc = FileProduct(joinpath(libdir(prefix), "pkgconfig", "libfoo.pc"))

# Assign products to `products`:
products = [earcut]


# Download binaries from hosted location
bin_prefix = "https://github.com/SimonDanisch/EarCutDeps/releases/download/v0.1.4"
# Listing of files generated by BinaryBuilder:
# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/Earcut.aarch64-linux-gnu.tar.gz", "dc137e09a22397d2b1ae8162d58e7f51469d65d73c5108460f556034ded6a9cd"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/Earcut.arm-linux-gnueabihf.tar.gz", "ffc7c5589c0bb0389d4957e320f5094df98fc254091b97ba894e9bb19cac223f"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/Earcut.i686-linux-gnu.tar.gz", "5b838d58a6ca1bc6a50b2618c3f903e2964e326511041a2be4b03ea831679927"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/Earcut.i686-w64-mingw32.tar.gz", "83d4833cd645e3fdc0040cfb47d6082f57b9e0a67aae48fb41fc6614e16de10b"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/Earcut.powerpc64le-linux-gnu.tar.gz", "1d18b6397dfaeb89297d639ae8178bf830414182689e86fb513edd652e6f6872"),
    BinaryProvider.MacOS() => ("$bin_prefix/Earcut.x86_64-apple-darwin14.tar.gz", "bbbf711726bf25bf2fd496938fb55ada2c688bcc3aa34127c42081225f539eeb"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/Earcut.x86_64-linux-gnu.tar.gz", "53b6e41d7319b5a957ab59ddca224e4667577d4c0560fd0868e2aa1ff2b521a7"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/Earcut.x86_64-w64-mingw32.tar.gz", "42e63d547f5320a778375b6ebab4bd74a61d80972b71ed20a0c379c83fb0500b"),
)
if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=true) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end
    @write_deps_file earcut
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end
